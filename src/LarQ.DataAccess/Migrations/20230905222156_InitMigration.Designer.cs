// <auto-generated />
using System;
using LarQ.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LarQ.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230905222156_InitMigration")]
    partial class InitMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.7.23375.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LarQ.Core.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("LarQ.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("FavoriteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LarQ.Core.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IconId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IconId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b955176e-33eb-464b-8384-74ef7c6132dd"),
                            CreateAt = new DateTime(2023, 9, 6, 1, 21, 56, 657, DateTimeKind.Local).AddTicks(1992),
                            IconId = new Guid("be875cae-0bd8-45e6-adf4-957f3b14b296"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("03e9acfc-962e-4720-a9ac-d55b6bd68d89"),
                            CreateAt = new DateTime(2023, 9, 6, 1, 21, 56, 657, DateTimeKind.Local).AddTicks(2008),
                            IconId = new Guid("be875cae-0bd8-45e6-adf4-957f3b14b296"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("2bb71785-f677-4c45-b00c-bb7a98178c3b"),
                            CreateAt = new DateTime(2023, 9, 6, 1, 21, 56, 657, DateTimeKind.Local).AddTicks(2017),
                            IconId = new Guid("be875cae-0bd8-45e6-adf4-957f3b14b296"),
                            Name = "Animation"
                        },
                        new
                        {
                            Id = new Guid("7cc14c76-0096-448b-b831-9216c26d0f92"),
                            CreateAt = new DateTime(2023, 9, 6, 1, 21, 56, 657, DateTimeKind.Local).AddTicks(2025),
                            IconId = new Guid("be875cae-0bd8-45e6-adf4-957f3b14b296"),
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = new Guid("6cb324da-7f4e-4f85-a725-01a1f70a0a54"),
                            CreateAt = new DateTime(2023, 9, 6, 1, 21, 56, 657, DateTimeKind.Local).AddTicks(2033),
                            IconId = new Guid("be875cae-0bd8-45e6-adf4-957f3b14b296"),
                            Name = "Crime"
                        },
                        new
                        {
                            Id = new Guid("51fa28b6-2248-441a-9417-f84105bce750"),
                            CreateAt = new DateTime(2023, 9, 6, 1, 21, 56, 657, DateTimeKind.Local).AddTicks(2042),
                            IconId = new Guid("be875cae-0bd8-45e6-adf4-957f3b14b296"),
                            Name = "Documentary"
                        },
                        new
                        {
                            Id = new Guid("0a45a756-0f4d-4a06-93b6-03171c31d70a"),
                            CreateAt = new DateTime(2023, 9, 6, 1, 21, 56, 657, DateTimeKind.Local).AddTicks(2051),
                            IconId = new Guid("be875cae-0bd8-45e6-adf4-957f3b14b296"),
                            Name = "Drama"
                        },
                        new
                        {
                            Id = new Guid("11399beb-cd61-43a0-a309-40948fedc2d7"),
                            CreateAt = new DateTime(2023, 9, 6, 1, 21, 56, 657, DateTimeKind.Local).AddTicks(2059),
                            IconId = new Guid("be875cae-0bd8-45e6-adf4-957f3b14b296"),
                            Name = "Family"
                        },
                        new
                        {
                            Id = new Guid("3acff3b1-5ab5-4244-bdb4-bf52cf5cb94f"),
                            CreateAt = new DateTime(2023, 9, 6, 1, 21, 56, 657, DateTimeKind.Local).AddTicks(2067),
                            IconId = new Guid("be875cae-0bd8-45e6-adf4-957f3b14b296"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("c9b3b33b-0ae4-4874-97a3-e1a3689880e7"),
                            CreateAt = new DateTime(2023, 9, 6, 1, 21, 56, 657, DateTimeKind.Local).AddTicks(2076),
                            IconId = new Guid("be875cae-0bd8-45e6-adf4-957f3b14b296"),
                            Name = "History"
                        },
                        new
                        {
                            Id = new Guid("96232068-c365-4da0-8d66-79e9177236fb"),
                            CreateAt = new DateTime(2023, 9, 6, 1, 21, 56, 657, DateTimeKind.Local).AddTicks(2083),
                            IconId = new Guid("be875cae-0bd8-45e6-adf4-957f3b14b296"),
                            Name = "Horror"
                        },
                        new
                        {
                            Id = new Guid("b71e718f-45c6-42ec-9ad5-22629c941e29"),
                            CreateAt = new DateTime(2023, 9, 6, 1, 21, 56, 657, DateTimeKind.Local).AddTicks(2092),
                            IconId = new Guid("be875cae-0bd8-45e6-adf4-957f3b14b296"),
                            Name = "Music"
                        },
                        new
                        {
                            Id = new Guid("d14cabee-7142-45a8-b103-259905bc398c"),
                            CreateAt = new DateTime(2023, 9, 6, 1, 21, 56, 657, DateTimeKind.Local).AddTicks(2099),
                            IconId = new Guid("be875cae-0bd8-45e6-adf4-957f3b14b296"),
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = new Guid("a8190e1b-8aec-44db-a76d-7ff210c0e789"),
                            CreateAt = new DateTime(2023, 9, 6, 1, 21, 56, 657, DateTimeKind.Local).AddTicks(2107),
                            IconId = new Guid("be875cae-0bd8-45e6-adf4-957f3b14b296"),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("b005cfd4-9dea-43a8-8b54-d5f46bcb20e5"),
                            CreateAt = new DateTime(2023, 9, 6, 1, 21, 56, 657, DateTimeKind.Local).AddTicks(2115),
                            IconId = new Guid("be875cae-0bd8-45e6-adf4-957f3b14b296"),
                            Name = "ScienceFiction"
                        },
                        new
                        {
                            Id = new Guid("30c71b44-8981-49f8-acf0-46f3552df5d9"),
                            CreateAt = new DateTime(2023, 9, 6, 1, 21, 56, 657, DateTimeKind.Local).AddTicks(2123),
                            IconId = new Guid("be875cae-0bd8-45e6-adf4-957f3b14b296"),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = new Guid("5b4238f5-cea2-4238-9410-5e75bfb5e372"),
                            CreateAt = new DateTime(2023, 9, 6, 1, 21, 56, 657, DateTimeKind.Local).AddTicks(2131),
                            IconId = new Guid("be875cae-0bd8-45e6-adf4-957f3b14b296"),
                            Name = "War"
                        },
                        new
                        {
                            Id = new Guid("1d838d22-8cd8-4b94-86eb-372e73dfc2ab"),
                            CreateAt = new DateTime(2023, 9, 6, 1, 21, 56, 657, DateTimeKind.Local).AddTicks(2140),
                            IconId = new Guid("be875cae-0bd8-45e6-adf4-957f3b14b296"),
                            Name = "Western"
                        });
                });

            modelBuilder.Entity("LarQ.Core.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EpisodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Episode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("AudioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<Guid>("PodcastId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReleaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("TranscriptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AudioId");

                    b.HasIndex("PodcastId");

                    b.HasIndex("TranscriptId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Favorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("LarQ.Core.Entities.FavoriteItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FavoriteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PodcastId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FavoriteId");

                    b.HasIndex("PodcastId");

                    b.ToTable("FavoriteItems");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("BornDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EpisodesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PictureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EpisodesId");

                    b.HasIndex("PictureId")
                        .IsUnique();

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("LarQ.Core.Entities.PlaylistItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PodcastsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("PodcastsId");

                    b.ToTable("PlaylistItems");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Podcast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CoverId")
                        .IsUnique();

                    b.HasIndex("HostId");

                    b.ToTable("Podcasts");
                });

            modelBuilder.Entity("LarQ.Core.Entities.React", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EpisodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReactType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Reacts");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Subscribe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PodcastId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PodcastId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Subscribes");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("LarQ.Core.Entities.UploadedFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UploadedFiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be875cae-0bd8-45e6-adf4-957f3b14b296"),
                            ContentType = "jpg",
                            CreateAt = new DateTime(2023, 9, 6, 1, 21, 56, 657, DateTimeKind.Local).AddTicks(940),
                            FileName = "GuestImage",
                            FilePath = "/home/modsyan/projects/",
                            FileSize = 0L,
                            OriginalFileName = "23511317.jpg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LarQ.Core.Entities.Host", b =>
                {
                    b.HasBaseType("LarQ.Core.Entities.ApplicationUser");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PictureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PictureId")
                        .IsUnique()
                        .HasFilter("[PictureId] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator().HasValue("Host");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Owner", b =>
                {
                    b.HasBaseType("LarQ.Core.Entities.ApplicationUser");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator().HasValue("Owner");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Category", b =>
                {
                    b.HasOne("LarQ.Core.Entities.UploadedFile", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Comment", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Episode", b =>
                {
                    b.HasOne("LarQ.Core.Entities.UploadedFile", "Audio")
                        .WithMany()
                        .HasForeignKey("AudioId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.Podcast", "Podcast")
                        .WithMany("Episodes")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.UploadedFile", "Transcript")
                        .WithMany()
                        .HasForeignKey("TranscriptId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Audio");

                    b.Navigation("Podcast");

                    b.Navigation("Transcript");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Favorite", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationUser", "User")
                        .WithOne("Favorite")
                        .HasForeignKey("LarQ.Core.Entities.Favorite", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LarQ.Core.Entities.FavoriteItem", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Favorite", "Favorite")
                        .WithMany("Items")
                        .HasForeignKey("FavoriteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.Podcast", "Podcast")
                        .WithMany()
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Favorite");

                    b.Navigation("Podcast");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Guest", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Episode", "Episodes")
                        .WithMany("Guests")
                        .HasForeignKey("EpisodesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.UploadedFile", "Picture")
                        .WithOne()
                        .HasForeignKey("LarQ.Core.Entities.Guest", "PictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episodes");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Playlist", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LarQ.Core.Entities.PlaylistItem", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Playlist", "Playlist")
                        .WithMany("Items")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.Podcast", "Podcasts")
                        .WithMany()
                        .HasForeignKey("PodcastsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Podcasts");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Podcast", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Category", "Category")
                        .WithMany("Podcasts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.UploadedFile", "Cover")
                        .WithOne()
                        .HasForeignKey("LarQ.Core.Entities.Podcast", "CoverId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.Host", "Host")
                        .WithMany("Podcasts")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Cover");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("LarQ.Core.Entities.React", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Episode", "Episode")
                        .WithMany("Reacts")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("LarQ.Core.Entities.React", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Subscribe", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Podcast", "Podcast")
                        .WithMany("Subscribes")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.Subscription", "Subscription")
                        .WithMany("Subscribes")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Podcast");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Subscription", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationUser", "User")
                        .WithOne("Subscription")
                        .HasForeignKey("LarQ.Core.Entities.Subscription", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LarQ.Core.Entities.Host", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Owner", "Owner")
                        .WithMany("Hosts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.UploadedFile", "Picture")
                        .WithOne()
                        .HasForeignKey("LarQ.Core.Entities.Host", "PictureId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("LarQ.Core.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Favorite")
                        .IsRequired();

                    b.Navigation("Subscription")
                        .IsRequired();
                });

            modelBuilder.Entity("LarQ.Core.Entities.Category", b =>
                {
                    b.Navigation("Podcasts");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Episode", b =>
                {
                    b.Navigation("Guests");

                    b.Navigation("Reacts");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Favorite", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Playlist", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Podcast", b =>
                {
                    b.Navigation("Episodes");

                    b.Navigation("Subscribes");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Subscription", b =>
                {
                    b.Navigation("Subscribes");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Host", b =>
                {
                    b.Navigation("Podcasts");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Owner", b =>
                {
                    b.Navigation("Hosts");
                });
#pragma warning restore 612, 618
        }
    }
}
