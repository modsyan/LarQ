// <auto-generated />
using System;
using LarQ.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LarQ.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230908063959_InitMigration")]
    partial class InitMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.7.23375.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LarQ.Core.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("LarQ.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("FavoriteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LarQ.Core.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IconId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IconId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0db5f89e-83fd-4a79-954f-556313e8ae65"),
                            CreateAt = new DateTime(2023, 9, 8, 9, 39, 59, 430, DateTimeKind.Local).AddTicks(4634),
                            IconId = new Guid("e0451234-5b85-4443-94ed-a02989514f64"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("a9ac8df4-f437-4528-92b1-a5769656a46f"),
                            CreateAt = new DateTime(2023, 9, 8, 9, 39, 59, 430, DateTimeKind.Local).AddTicks(4669),
                            IconId = new Guid("e0451234-5b85-4443-94ed-a02989514f64"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("b5c64858-088b-4700-b8e3-a38978627c76"),
                            CreateAt = new DateTime(2023, 9, 8, 9, 39, 59, 430, DateTimeKind.Local).AddTicks(4678),
                            IconId = new Guid("e0451234-5b85-4443-94ed-a02989514f64"),
                            Name = "Animation"
                        },
                        new
                        {
                            Id = new Guid("a81bf23c-7ca5-46b7-8a61-72446b117b4a"),
                            CreateAt = new DateTime(2023, 9, 8, 9, 39, 59, 430, DateTimeKind.Local).AddTicks(4687),
                            IconId = new Guid("e0451234-5b85-4443-94ed-a02989514f64"),
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = new Guid("eaa04dae-5b8c-45bc-b94b-96b5d7b1e618"),
                            CreateAt = new DateTime(2023, 9, 8, 9, 39, 59, 430, DateTimeKind.Local).AddTicks(4696),
                            IconId = new Guid("e0451234-5b85-4443-94ed-a02989514f64"),
                            Name = "Crime"
                        },
                        new
                        {
                            Id = new Guid("bf25a915-c124-4dbd-a05a-e0dab5390a6b"),
                            CreateAt = new DateTime(2023, 9, 8, 9, 39, 59, 430, DateTimeKind.Local).AddTicks(4711),
                            IconId = new Guid("e0451234-5b85-4443-94ed-a02989514f64"),
                            Name = "Documentary"
                        },
                        new
                        {
                            Id = new Guid("aeb7b513-a924-4f9f-9fff-ad2a82ef52e3"),
                            CreateAt = new DateTime(2023, 9, 8, 9, 39, 59, 430, DateTimeKind.Local).AddTicks(4725),
                            IconId = new Guid("e0451234-5b85-4443-94ed-a02989514f64"),
                            Name = "Drama"
                        },
                        new
                        {
                            Id = new Guid("044d9400-4d9f-47ca-83cb-e6d0b1c96b74"),
                            CreateAt = new DateTime(2023, 9, 8, 9, 39, 59, 430, DateTimeKind.Local).AddTicks(4735),
                            IconId = new Guid("e0451234-5b85-4443-94ed-a02989514f64"),
                            Name = "Family"
                        },
                        new
                        {
                            Id = new Guid("0b1f7ec4-00ab-4432-b846-f18bb2343b4b"),
                            CreateAt = new DateTime(2023, 9, 8, 9, 39, 59, 430, DateTimeKind.Local).AddTicks(4744),
                            IconId = new Guid("e0451234-5b85-4443-94ed-a02989514f64"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("385722a9-6205-467b-b3c6-a4b5fdd6fa8d"),
                            CreateAt = new DateTime(2023, 9, 8, 9, 39, 59, 430, DateTimeKind.Local).AddTicks(4754),
                            IconId = new Guid("e0451234-5b85-4443-94ed-a02989514f64"),
                            Name = "History"
                        },
                        new
                        {
                            Id = new Guid("0b23690e-b11b-4e79-b118-ad2a2967cd55"),
                            CreateAt = new DateTime(2023, 9, 8, 9, 39, 59, 430, DateTimeKind.Local).AddTicks(4763),
                            IconId = new Guid("e0451234-5b85-4443-94ed-a02989514f64"),
                            Name = "Horror"
                        },
                        new
                        {
                            Id = new Guid("e51e4b90-a118-4ca3-8d2b-b5ca048aa858"),
                            CreateAt = new DateTime(2023, 9, 8, 9, 39, 59, 430, DateTimeKind.Local).AddTicks(4772),
                            IconId = new Guid("e0451234-5b85-4443-94ed-a02989514f64"),
                            Name = "Music"
                        },
                        new
                        {
                            Id = new Guid("ef7ac3b6-597a-4617-b0a3-e5456b5dd2ac"),
                            CreateAt = new DateTime(2023, 9, 8, 9, 39, 59, 430, DateTimeKind.Local).AddTicks(4783),
                            IconId = new Guid("e0451234-5b85-4443-94ed-a02989514f64"),
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = new Guid("dd6bb0e3-49cc-4438-a658-21d0008d9ffc"),
                            CreateAt = new DateTime(2023, 9, 8, 9, 39, 59, 430, DateTimeKind.Local).AddTicks(4792),
                            IconId = new Guid("e0451234-5b85-4443-94ed-a02989514f64"),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("aabf1ccc-25a0-405f-903d-3404d9548edd"),
                            CreateAt = new DateTime(2023, 9, 8, 9, 39, 59, 430, DateTimeKind.Local).AddTicks(4801),
                            IconId = new Guid("e0451234-5b85-4443-94ed-a02989514f64"),
                            Name = "ScienceFiction"
                        },
                        new
                        {
                            Id = new Guid("d63f8af7-73c0-4c9e-bcdc-71e20b6c8a85"),
                            CreateAt = new DateTime(2023, 9, 8, 9, 39, 59, 430, DateTimeKind.Local).AddTicks(4810),
                            IconId = new Guid("e0451234-5b85-4443-94ed-a02989514f64"),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = new Guid("66777054-373e-4bbe-8f4f-585465088a83"),
                            CreateAt = new DateTime(2023, 9, 8, 9, 39, 59, 430, DateTimeKind.Local).AddTicks(4819),
                            IconId = new Guid("e0451234-5b85-4443-94ed-a02989514f64"),
                            Name = "War"
                        },
                        new
                        {
                            Id = new Guid("db124417-b489-4e74-afb4-0843dc699927"),
                            CreateAt = new DateTime(2023, 9, 8, 9, 39, 59, 430, DateTimeKind.Local).AddTicks(4828),
                            IconId = new Guid("e0451234-5b85-4443-94ed-a02989514f64"),
                            Name = "Western"
                        });
                });

            modelBuilder.Entity("LarQ.Core.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EpisodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Episode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("AudioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<Guid>("PodcastId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReleaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("TranscriptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AudioId");

                    b.HasIndex("PodcastId");

                    b.HasIndex("TranscriptId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Favorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("LarQ.Core.Entities.FavoriteItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FavoriteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PodcastId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FavoriteId");

                    b.HasIndex("PodcastId");

                    b.ToTable("FavoriteItems");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("BornDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EpisodesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PictureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EpisodesId");

                    b.HasIndex("PictureId")
                        .IsUnique();

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("LarQ.Core.Entities.PlaylistItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PodcastsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("PodcastsId");

                    b.ToTable("PlaylistItems");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Podcast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CoverId")
                        .IsUnique();

                    b.HasIndex("HostId");

                    b.ToTable("Podcasts");
                });

            modelBuilder.Entity("LarQ.Core.Entities.React", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EpisodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReactType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Reacts");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Subscribe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PodcastId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PodcastId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Subscribes");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("LarQ.Core.Entities.UploadedFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UploadedFiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0451234-5b85-4443-94ed-a02989514f64"),
                            ContentType = "jpg",
                            CreateAt = new DateTime(2023, 9, 8, 9, 39, 59, 430, DateTimeKind.Local).AddTicks(3376),
                            FileName = "GuestImage",
                            FilePath = "/home/modsyan/projects/",
                            FileSize = 0L,
                            OriginalFileName = "23511317.jpg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LarQ.Core.Entities.Host", b =>
                {
                    b.HasBaseType("LarQ.Core.Entities.ApplicationUser");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PictureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PictureId")
                        .IsUnique()
                        .HasFilter("[PictureId] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator().HasValue("Host");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Owner", b =>
                {
                    b.HasBaseType("LarQ.Core.Entities.ApplicationUser");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator().HasValue("Owner");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Category", b =>
                {
                    b.HasOne("LarQ.Core.Entities.UploadedFile", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Comment", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Episode", b =>
                {
                    b.HasOne("LarQ.Core.Entities.UploadedFile", "Audio")
                        .WithMany()
                        .HasForeignKey("AudioId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.Podcast", "Podcast")
                        .WithMany("Episodes")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.UploadedFile", "Transcript")
                        .WithMany()
                        .HasForeignKey("TranscriptId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Audio");

                    b.Navigation("Podcast");

                    b.Navigation("Transcript");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Favorite", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationUser", "User")
                        .WithOne("Favorite")
                        .HasForeignKey("LarQ.Core.Entities.Favorite", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LarQ.Core.Entities.FavoriteItem", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Favorite", "Favorite")
                        .WithMany("Items")
                        .HasForeignKey("FavoriteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.Podcast", "Podcast")
                        .WithMany()
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Favorite");

                    b.Navigation("Podcast");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Guest", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Episode", "Episodes")
                        .WithMany("Guests")
                        .HasForeignKey("EpisodesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.UploadedFile", "Picture")
                        .WithOne()
                        .HasForeignKey("LarQ.Core.Entities.Guest", "PictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episodes");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Playlist", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LarQ.Core.Entities.PlaylistItem", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Playlist", "Playlist")
                        .WithMany("Items")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.Podcast", "Podcasts")
                        .WithMany()
                        .HasForeignKey("PodcastsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Podcasts");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Podcast", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Category", "Category")
                        .WithMany("Podcasts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.UploadedFile", "Cover")
                        .WithOne()
                        .HasForeignKey("LarQ.Core.Entities.Podcast", "CoverId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.Host", "Host")
                        .WithMany("Podcasts")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Cover");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("LarQ.Core.Entities.React", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Episode", "Episode")
                        .WithMany("Reacts")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("LarQ.Core.Entities.React", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Subscribe", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Podcast", "Podcast")
                        .WithMany("Subscribes")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.Subscription", "Subscription")
                        .WithMany("Subscribes")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Podcast");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Subscription", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationUser", "User")
                        .WithOne("Subscription")
                        .HasForeignKey("LarQ.Core.Entities.Subscription", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LarQ.Core.Entities.Host", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Owner", "Owner")
                        .WithMany("Hosts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.UploadedFile", "Picture")
                        .WithOne()
                        .HasForeignKey("LarQ.Core.Entities.Host", "PictureId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("LarQ.Core.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Favorite")
                        .IsRequired();

                    b.Navigation("Subscription")
                        .IsRequired();
                });

            modelBuilder.Entity("LarQ.Core.Entities.Category", b =>
                {
                    b.Navigation("Podcasts");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Episode", b =>
                {
                    b.Navigation("Guests");

                    b.Navigation("Reacts");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Favorite", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Playlist", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Podcast", b =>
                {
                    b.Navigation("Episodes");

                    b.Navigation("Subscribes");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Subscription", b =>
                {
                    b.Navigation("Subscribes");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Host", b =>
                {
                    b.Navigation("Podcasts");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Owner", b =>
                {
                    b.Navigation("Hosts");
                });
#pragma warning restore 612, 618
        }
    }
}
