// <auto-generated />
using System;
using LarQ.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LarQ.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230903034520_InitMigration")]
    partial class InitMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.7.23375.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<Guid>("ActorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActorsId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("ActorMovies");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("BornDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PictureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PictureId");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("478fda24-410b-4b8e-9816-3a59d504884b"),
                            BornDate = new DateTime(1932, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Omar Sharif",
                            Nationality = "Egyptian",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("8ed78aa7-8f60-4bf2-aae5-102e623e1af8"),
                            BornDate = new DateTime(1965, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Shah Rukh Khan",
                            Nationality = "Indian",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("73116e1e-fbc4-41f1-ab5a-33a78c85721a"),
                            BornDate = new DateTime(1949, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Meryl Streep",
                            Nationality = "American",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("44d66726-8025-4e5f-b0bd-b9c52f5e87a7"),
                            BornDate = new DateTime(1940, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Adel Emam",
                            Nationality = "Egyptian",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("91655fb3-4d03-473f-88dc-97573e757fc7"),
                            BornDate = new DateTime(1956, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tom Hanks",
                            Nationality = "American",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("0863678b-57f2-4e8c-a59a-af9c4d7e6bef"),
                            BornDate = new DateTime(1965, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Aamir Khan",
                            Nationality = "Indian",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("c7bea4be-f81a-429e-ae7b-dd90a5cf6c36"),
                            BornDate = new DateTime(1974, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Leonardo DiCaprio",
                            Nationality = "American",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("86c342fb-036b-4405-8069-9f6d643aa44a"),
                            BornDate = new DateTime(1965, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Salman Khan",
                            Nationality = "Indian",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("7f4dc9d0-09ba-4bf7-94bf-170b43244b3c"),
                            BornDate = new DateTime(1931, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Faten Hamama",
                            Nationality = "Egyptian",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("b6a1ed4d-2acb-428b-9196-bedbf718570a"),
                            BornDate = new DateTime(1974, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Penélope Cruz",
                            Nationality = "Spanish",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("24332a34-a1a8-4729-843e-f2a5df5e7eab"),
                            BornDate = new DateTime(1949, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ahmed Zaki",
                            Nationality = "Egyptian",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("8ec3a827-ff52-4518-87cf-7f9d21dff3a4"),
                            BornDate = new DateTime(1984, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mahira Khan",
                            Nationality = "Pakistani",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("8ed2c14a-6656-4702-a51f-1a5db1f5465b"),
                            BornDate = new DateTime(1973, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Amr Waked",
                            Nationality = "Egyptian",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("9f340754-7f9e-45d0-a0a7-c25ef628fbd5"),
                            BornDate = new DateTime(1976, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Haifa Wehbe",
                            Nationality = "Lebanese",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("213d3e5e-b3c1-43ed-856d-8d424320472b"),
                            BornDate = new DateTime(1963, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Johnny Depp",
                            Nationality = "American",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("f2d44b55-3292-4742-ab80-cdbb4127a584"),
                            BornDate = new DateTime(1942, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Amitabh Bachchan",
                            Nationality = "Indian",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("f9fcb594-0aa8-43a0-8058-badfe8d81395"),
                            BornDate = new DateTime(1967, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Julia Roberts",
                            Nationality = "American",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("4eeb4185-f6af-4663-bdd2-6f841c72846e"),
                            BornDate = new DateTime(1966, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Khaled Abol Naga",
                            Nationality = "Egyptian",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("06dfb56b-b8a2-4956-b281-79629b9a27b1"),
                            BornDate = new DateTime(1943, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Robert De Niro",
                            Nationality = "American",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("df48b136-987b-40fc-a9ba-71873ee801fc"),
                            BornDate = new DateTime(1930, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nawal El Saadawi",
                            Nationality = "Egyptian",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("40bc7fc5-eff0-45e3-a78f-d21e66502b62"),
                            BornDate = new DateTime(1969, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cate Blanchett",
                            Nationality = "Australian",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("0d5531e5-086a-46cd-ac90-c90f8d36e318"),
                            BornDate = new DateTime(1937, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Morgan Freeman",
                            Nationality = "American",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("bed43335-d370-4d4b-9e73-87ea6b11ea47"),
                            BornDate = new DateTime(1964, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Monica Bellucci",
                            Nationality = "Italian",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("778be799-ad7f-4fe7-8407-caabbc5f0cd0"),
                            BornDate = new DateTime(1964, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Keanu Reeves",
                            Nationality = "Canadian",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("9555e95f-2364-4bae-b9f4-68b071b480fc"),
                            BornDate = new DateTime(1954, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Denzel Washington",
                            Nationality = "American",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        },
                        new
                        {
                            Id = new Guid("bd9bce44-c59d-47b5-bd58-dfbf8f57c041"),
                            BornDate = new DateTime(1974, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nelly Karim",
                            Nationality = "Egyptian",
                            PictureId = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f")
                        });
                });

            modelBuilder.Entity("LarQ.Core.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IconId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IconId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8e6f56b-a22b-41d3-bfc3-728cb5fd6663"),
                            CreateAt = new DateTime(2023, 9, 3, 6, 45, 20, 288, DateTimeKind.Local).AddTicks(5863),
                            IconId = new Guid("7a628b2a-fb48-42d3-9fdc-9ea16bf48e88"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("59df78ae-eb12-484d-b2e4-67c6e5fdb4e1"),
                            CreateAt = new DateTime(2023, 9, 3, 6, 45, 20, 288, DateTimeKind.Local).AddTicks(5888),
                            IconId = new Guid("7a628b2a-fb48-42d3-9fdc-9ea16bf48e88"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("5b8f6067-aeaf-49d3-abba-bf30d9ec0e31"),
                            CreateAt = new DateTime(2023, 9, 3, 6, 45, 20, 288, DateTimeKind.Local).AddTicks(5895),
                            IconId = new Guid("7a628b2a-fb48-42d3-9fdc-9ea16bf48e88"),
                            Name = "Animation"
                        },
                        new
                        {
                            Id = new Guid("021dd101-8b97-4087-8279-eecf1dfd5315"),
                            CreateAt = new DateTime(2023, 9, 3, 6, 45, 20, 288, DateTimeKind.Local).AddTicks(5901),
                            IconId = new Guid("7a628b2a-fb48-42d3-9fdc-9ea16bf48e88"),
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = new Guid("24842d8b-a7c0-408b-a4ff-8d3fce394a53"),
                            CreateAt = new DateTime(2023, 9, 3, 6, 45, 20, 288, DateTimeKind.Local).AddTicks(5940),
                            IconId = new Guid("7a628b2a-fb48-42d3-9fdc-9ea16bf48e88"),
                            Name = "Crime"
                        },
                        new
                        {
                            Id = new Guid("509fad61-329f-4ba6-8b52-cc013858c232"),
                            CreateAt = new DateTime(2023, 9, 3, 6, 45, 20, 288, DateTimeKind.Local).AddTicks(5952),
                            IconId = new Guid("7a628b2a-fb48-42d3-9fdc-9ea16bf48e88"),
                            Name = "Documentary"
                        },
                        new
                        {
                            Id = new Guid("2998fe97-5533-40a5-a441-297c8cddfe6d"),
                            CreateAt = new DateTime(2023, 9, 3, 6, 45, 20, 288, DateTimeKind.Local).AddTicks(5958),
                            IconId = new Guid("7a628b2a-fb48-42d3-9fdc-9ea16bf48e88"),
                            Name = "Drama"
                        },
                        new
                        {
                            Id = new Guid("9dceb253-137e-4a55-8d45-d71d97ca63f5"),
                            CreateAt = new DateTime(2023, 9, 3, 6, 45, 20, 288, DateTimeKind.Local).AddTicks(5964),
                            IconId = new Guid("7a628b2a-fb48-42d3-9fdc-9ea16bf48e88"),
                            Name = "Family"
                        },
                        new
                        {
                            Id = new Guid("fa3b6481-56e0-49f3-ad7c-363a7857af5f"),
                            CreateAt = new DateTime(2023, 9, 3, 6, 45, 20, 288, DateTimeKind.Local).AddTicks(5970),
                            IconId = new Guid("7a628b2a-fb48-42d3-9fdc-9ea16bf48e88"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("32c673de-4c34-46de-adf1-bab1f8ccfea2"),
                            CreateAt = new DateTime(2023, 9, 3, 6, 45, 20, 288, DateTimeKind.Local).AddTicks(5979),
                            IconId = new Guid("7a628b2a-fb48-42d3-9fdc-9ea16bf48e88"),
                            Name = "History"
                        },
                        new
                        {
                            Id = new Guid("e04e4e4e-4082-499e-939f-6eb13ed297f2"),
                            CreateAt = new DateTime(2023, 9, 3, 6, 45, 20, 288, DateTimeKind.Local).AddTicks(5985),
                            IconId = new Guid("7a628b2a-fb48-42d3-9fdc-9ea16bf48e88"),
                            Name = "Horror"
                        },
                        new
                        {
                            Id = new Guid("b743f838-4ea7-4522-a015-6657d67a7990"),
                            CreateAt = new DateTime(2023, 9, 3, 6, 45, 20, 288, DateTimeKind.Local).AddTicks(5991),
                            IconId = new Guid("7a628b2a-fb48-42d3-9fdc-9ea16bf48e88"),
                            Name = "Music"
                        },
                        new
                        {
                            Id = new Guid("ac50915b-23c9-41df-a878-db74bea1aef3"),
                            CreateAt = new DateTime(2023, 9, 3, 6, 45, 20, 288, DateTimeKind.Local).AddTicks(5997),
                            IconId = new Guid("7a628b2a-fb48-42d3-9fdc-9ea16bf48e88"),
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = new Guid("09d64147-6677-40ec-b88a-11adbb31b1cd"),
                            CreateAt = new DateTime(2023, 9, 3, 6, 45, 20, 288, DateTimeKind.Local).AddTicks(6002),
                            IconId = new Guid("7a628b2a-fb48-42d3-9fdc-9ea16bf48e88"),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("5ed0e656-8d2a-449c-9171-f55cb5023b59"),
                            CreateAt = new DateTime(2023, 9, 3, 6, 45, 20, 288, DateTimeKind.Local).AddTicks(6008),
                            IconId = new Guid("7a628b2a-fb48-42d3-9fdc-9ea16bf48e88"),
                            Name = "ScienceFiction"
                        },
                        new
                        {
                            Id = new Guid("1f2208aa-0467-437d-bd35-81d0a1bdedbe"),
                            CreateAt = new DateTime(2023, 9, 3, 6, 45, 20, 288, DateTimeKind.Local).AddTicks(6014),
                            IconId = new Guid("7a628b2a-fb48-42d3-9fdc-9ea16bf48e88"),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = new Guid("b865f631-af82-470a-9bc5-4d205161bb7e"),
                            CreateAt = new DateTime(2023, 9, 3, 6, 45, 20, 288, DateTimeKind.Local).AddTicks(6020),
                            IconId = new Guid("7a628b2a-fb48-42d3-9fdc-9ea16bf48e88"),
                            Name = "War"
                        },
                        new
                        {
                            Id = new Guid("8eded9aa-8568-47d8-92dc-21e68e44fd85"),
                            CreateAt = new DateTime(2023, 9, 3, 6, 45, 20, 288, DateTimeKind.Local).AddTicks(6026),
                            IconId = new Guid("7a628b2a-fb48-42d3-9fdc-9ea16bf48e88"),
                            Name = "Western"
                        });
                });

            modelBuilder.Entity("LarQ.Core.Entities.Favorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid>("TrailerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CoverId")
                        .IsUnique();

                    b.HasIndex("TrailerId")
                        .IsUnique();

                    b.HasIndex("VideoId")
                        .IsUnique();

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("LarQ.Core.Entities.UploadedFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UploadedFiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a628b2a-fb48-42d3-9fdc-9ea16bf48e88"),
                            ContentType = "jpg",
                            CreateAt = new DateTime(2023, 9, 3, 6, 45, 20, 288, DateTimeKind.Local).AddTicks(4984),
                            FileName = "ActorImage",
                            FilePath = "/home/modsyan/projects/",
                            FileSize = 0L,
                            OriginalFileName = "23511317.jpg"
                        },
                        new
                        {
                            Id = new Guid("b07b46ea-af97-4b78-8976-3bd112b5a97f"),
                            ContentType = "jpg",
                            CreateAt = new DateTime(2023, 9, 3, 6, 45, 20, 288, DateTimeKind.Local).AddTicks(6086),
                            FileName = "ActorImage",
                            FilePath = "/home/modsyan/projects/",
                            FileSize = 0L,
                            OriginalFileName = "23511317.jpg"
                        });
                });

            modelBuilder.Entity("LarQ.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LarQ.Core.Entities.Actor", b =>
                {
                    b.HasOne("LarQ.Core.Entities.UploadedFile", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Category", b =>
                {
                    b.HasOne("LarQ.Core.Entities.UploadedFile", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Favorite", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Movie", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Category", "Category")
                        .WithMany("Movies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.UploadedFile", "Cover")
                        .WithOne()
                        .HasForeignKey("LarQ.Core.Entities.Movie", "CoverId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.UploadedFile", "Trailer")
                        .WithOne()
                        .HasForeignKey("LarQ.Core.Entities.Movie", "TrailerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.UploadedFile", "Video")
                        .WithOne()
                        .HasForeignKey("LarQ.Core.Entities.Movie", "VideoId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Cover");

                    b.Navigation("Trailer");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LarQ.Core.Entities.Category", b =>
                {
                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
