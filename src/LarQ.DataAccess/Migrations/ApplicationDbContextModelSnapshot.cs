// <auto-generated />
using System;
using LarQ.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LarQ.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.7.23375.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LarQ.Core.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("LarQ.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("FavoriteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0224e690-3760-4304-9e00-7bf9aa53da1c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "770f8493-5cea-405f-a86d-3a9ad356b3ab",
                            Email = "me@admin.com",
                            EmailConfirmed = true,
                            FavoriteId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ME@ADMIN.COM",
                            NormalizedUserName = "ME@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ0WUGjWLkXmaVyV0EnSrWRDet25PXRkSEnVU86myV7I9TX0yTNXGnzF/k526PbUvw==",
                            PhoneNumberConfirmed = false,
                            SubscriptionId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TwoFactorEnabled = false,
                            UserName = "me@admin.com"
                        },
                        new
                        {
                            Id = new Guid("4e803c56-02f4-44b6-bc20-4a20df7d9698"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2b25269a-3064-4d47-bdab-ac8d9eaa0260",
                            Email = "me@owner.com",
                            EmailConfirmed = true,
                            FavoriteId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LockoutEnabled = false,
                            Name = "Owner",
                            NormalizedEmail = "ME@OWNER.COM",
                            NormalizedUserName = "ME@OWNER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKQUUeY73uwRgGGOnEkek6GZrlYAr3+x4et65iROJrlqpnMwmOJjsj3t8E2EZS13fQ==",
                            PhoneNumberConfirmed = false,
                            SubscriptionId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TwoFactorEnabled = false,
                            UserName = "me@owner.com"
                        },
                        new
                        {
                            Id = new Guid("5c058293-f259-4407-8c2c-a27742e53769"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "593fdaab-94f5-425f-9231-65bcb99ab278",
                            Email = "twice@owner.com",
                            EmailConfirmed = true,
                            FavoriteId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LockoutEnabled = false,
                            Name = "Twice",
                            NormalizedEmail = "TWICE@OWNER.COM",
                            NormalizedUserName = "TWICe@OWNER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENo3J7Rp5kaTLfCYGEANGCVl2Ttn+6UwZloP6atg5nj3mW67AxGJiM1hYJTUsyewiA==",
                            PhoneNumberConfirmed = false,
                            SubscriptionId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TwoFactorEnabled = false,
                            UserName = "twice@owner.com"
                        });
                });

            modelBuilder.Entity("LarQ.Core.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IconId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IconId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1b96a7b-8603-497e-a119-24dfd971fc13"),
                            CreateAt = new DateTime(2023, 10, 17, 15, 58, 46, 951, DateTimeKind.Local).AddTicks(5724),
                            IconId = new Guid("3a30f028-12b6-4187-84de-df5ac5d838be"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("491ac550-eb74-4700-8a41-0b867566abf9"),
                            CreateAt = new DateTime(2023, 10, 17, 15, 58, 46, 951, DateTimeKind.Local).AddTicks(5736),
                            IconId = new Guid("3a30f028-12b6-4187-84de-df5ac5d838be"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("b21efb42-b546-4a6d-b101-07c96a6ed8b1"),
                            CreateAt = new DateTime(2023, 10, 17, 15, 58, 46, 951, DateTimeKind.Local).AddTicks(5741),
                            IconId = new Guid("3a30f028-12b6-4187-84de-df5ac5d838be"),
                            Name = "Animation"
                        },
                        new
                        {
                            Id = new Guid("192929bf-54d8-48a0-a6af-22a4fb9b83b6"),
                            CreateAt = new DateTime(2023, 10, 17, 15, 58, 46, 951, DateTimeKind.Local).AddTicks(5746),
                            IconId = new Guid("3a30f028-12b6-4187-84de-df5ac5d838be"),
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = new Guid("5f109560-b718-4645-a3e3-fcffe05f6bd6"),
                            CreateAt = new DateTime(2023, 10, 17, 15, 58, 46, 951, DateTimeKind.Local).AddTicks(5752),
                            IconId = new Guid("3a30f028-12b6-4187-84de-df5ac5d838be"),
                            Name = "Crime"
                        },
                        new
                        {
                            Id = new Guid("efe5f17c-7c07-4044-856d-330d17a67c03"),
                            CreateAt = new DateTime(2023, 10, 17, 15, 58, 46, 951, DateTimeKind.Local).AddTicks(5758),
                            IconId = new Guid("3a30f028-12b6-4187-84de-df5ac5d838be"),
                            Name = "Documentary"
                        },
                        new
                        {
                            Id = new Guid("a6371e38-0011-4874-8c10-ecf32e05827d"),
                            CreateAt = new DateTime(2023, 10, 17, 15, 58, 46, 951, DateTimeKind.Local).AddTicks(5763),
                            IconId = new Guid("3a30f028-12b6-4187-84de-df5ac5d838be"),
                            Name = "Drama"
                        },
                        new
                        {
                            Id = new Guid("472b87a8-1591-41a7-af4a-256dc850cdf5"),
                            CreateAt = new DateTime(2023, 10, 17, 15, 58, 46, 951, DateTimeKind.Local).AddTicks(5768),
                            IconId = new Guid("3a30f028-12b6-4187-84de-df5ac5d838be"),
                            Name = "Family"
                        },
                        new
                        {
                            Id = new Guid("f78ea7f3-f350-49ff-8c51-2299b99f45c8"),
                            CreateAt = new DateTime(2023, 10, 17, 15, 58, 46, 951, DateTimeKind.Local).AddTicks(5773),
                            IconId = new Guid("3a30f028-12b6-4187-84de-df5ac5d838be"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("02278eb6-ba51-47cc-bee0-19bf10f1a4f6"),
                            CreateAt = new DateTime(2023, 10, 17, 15, 58, 46, 951, DateTimeKind.Local).AddTicks(5779),
                            IconId = new Guid("3a30f028-12b6-4187-84de-df5ac5d838be"),
                            Name = "History"
                        },
                        new
                        {
                            Id = new Guid("35be6686-0dcb-47f2-93a6-b25e73b2d625"),
                            CreateAt = new DateTime(2023, 10, 17, 15, 58, 46, 951, DateTimeKind.Local).AddTicks(5784),
                            IconId = new Guid("3a30f028-12b6-4187-84de-df5ac5d838be"),
                            Name = "Horror"
                        },
                        new
                        {
                            Id = new Guid("28f2efd4-1fb0-4ffa-bac4-c7650458319e"),
                            CreateAt = new DateTime(2023, 10, 17, 15, 58, 46, 951, DateTimeKind.Local).AddTicks(5789),
                            IconId = new Guid("3a30f028-12b6-4187-84de-df5ac5d838be"),
                            Name = "Music"
                        },
                        new
                        {
                            Id = new Guid("2e56062d-9385-4d14-9ddb-4b54631a9e37"),
                            CreateAt = new DateTime(2023, 10, 17, 15, 58, 46, 951, DateTimeKind.Local).AddTicks(5794),
                            IconId = new Guid("3a30f028-12b6-4187-84de-df5ac5d838be"),
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = new Guid("0ab8e44e-3b98-4d74-a6c0-3cabc5761fa7"),
                            CreateAt = new DateTime(2023, 10, 17, 15, 58, 46, 951, DateTimeKind.Local).AddTicks(5799),
                            IconId = new Guid("3a30f028-12b6-4187-84de-df5ac5d838be"),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("9a52f097-a77b-4957-9cd4-2f9aec8d3274"),
                            CreateAt = new DateTime(2023, 10, 17, 15, 58, 46, 951, DateTimeKind.Local).AddTicks(5803),
                            IconId = new Guid("3a30f028-12b6-4187-84de-df5ac5d838be"),
                            Name = "ScienceFiction"
                        },
                        new
                        {
                            Id = new Guid("a827ea3e-6ed4-42cf-91a0-a5fd151c0315"),
                            CreateAt = new DateTime(2023, 10, 17, 15, 58, 46, 951, DateTimeKind.Local).AddTicks(5808),
                            IconId = new Guid("3a30f028-12b6-4187-84de-df5ac5d838be"),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = new Guid("0a3c9e29-9db0-492d-9991-a284ff8e0593"),
                            CreateAt = new DateTime(2023, 10, 17, 15, 58, 46, 951, DateTimeKind.Local).AddTicks(5813),
                            IconId = new Guid("3a30f028-12b6-4187-84de-df5ac5d838be"),
                            Name = "War"
                        },
                        new
                        {
                            Id = new Guid("48a0b837-b0a6-49d9-81fa-fa451060d48c"),
                            CreateAt = new DateTime(2023, 10, 17, 15, 58, 46, 951, DateTimeKind.Local).AddTicks(5819),
                            IconId = new Guid("3a30f028-12b6-4187-84de-df5ac5d838be"),
                            Name = "Western"
                        });
                });

            modelBuilder.Entity("LarQ.Core.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EpisodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Episode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("AudioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<Guid>("PodcastId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReleaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("TranscriptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AudioId");

                    b.HasIndex("PodcastId");

                    b.HasIndex("TranscriptId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Favorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("LarQ.Core.Entities.FavoriteItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FavoriteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PodcastId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FavoriteId");

                    b.HasIndex("PodcastId");

                    b.ToTable("FavoriteItems");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("BornDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EpisodesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PictureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EpisodesId");

                    b.HasIndex("PictureId")
                        .IsUnique();

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Host", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PictureId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Hosts");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("LarQ.Core.Entities.PlaylistItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PodcastsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("PodcastsId");

                    b.ToTable("PlaylistItems");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Podcast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CoverId")
                        .IsUnique();

                    b.HasIndex("HostId");

                    b.ToTable("Podcasts");
                });

            modelBuilder.Entity("LarQ.Core.Entities.React", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EpisodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReactType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Reacts");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Subscribe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PodcastId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PodcastId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Subscribes");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("LarQ.Core.Entities.UploadedFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UploadedFiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a30f028-12b6-4187-84de-df5ac5d838be"),
                            ContentType = "jpg",
                            CreateAt = new DateTime(2023, 10, 17, 15, 58, 46, 951, DateTimeKind.Local).AddTicks(5273),
                            FileName = "GuestImage",
                            FilePath = "/home/modsyan/projects/",
                            FileSize = 0L,
                            OriginalFileName = "23511317.jpg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LarQ.Core.Entities.Category", b =>
                {
                    b.HasOne("LarQ.Core.Entities.UploadedFile", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Comment", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Episode", b =>
                {
                    b.HasOne("LarQ.Core.Entities.UploadedFile", "Audio")
                        .WithMany()
                        .HasForeignKey("AudioId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.Podcast", "Podcast")
                        .WithMany("Episodes")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.UploadedFile", "Transcript")
                        .WithMany()
                        .HasForeignKey("TranscriptId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Audio");

                    b.Navigation("Podcast");

                    b.Navigation("Transcript");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Favorite", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationUser", "User")
                        .WithOne("Favorite")
                        .HasForeignKey("LarQ.Core.Entities.Favorite", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LarQ.Core.Entities.FavoriteItem", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Favorite", "Favorite")
                        .WithMany("Items")
                        .HasForeignKey("FavoriteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.Podcast", "Podcast")
                        .WithMany()
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Favorite");

                    b.Navigation("Podcast");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Guest", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Episode", "Episodes")
                        .WithMany("Guests")
                        .HasForeignKey("EpisodesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.UploadedFile", "Picture")
                        .WithOne()
                        .HasForeignKey("LarQ.Core.Entities.Guest", "PictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episodes");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Host", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Owner", "Owner")
                        .WithMany("Hosts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.UploadedFile", "Picture")
                        .WithOne()
                        .HasForeignKey("LarQ.Core.Entities.Host", "PictureId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("LarQ.Core.Entities.Host", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Picture");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Owner", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("LarQ.Core.Entities.Owner", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Playlist", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LarQ.Core.Entities.PlaylistItem", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Playlist", "Playlist")
                        .WithMany("Items")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.Podcast", "Podcasts")
                        .WithMany()
                        .HasForeignKey("PodcastsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Podcasts");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Podcast", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Category", "Category")
                        .WithMany("Podcasts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.UploadedFile", "Cover")
                        .WithOne()
                        .HasForeignKey("LarQ.Core.Entities.Podcast", "CoverId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.Host", "Host")
                        .WithMany("Podcasts")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Cover");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("LarQ.Core.Entities.React", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Episode", "Episode")
                        .WithMany("Reacts")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("LarQ.Core.Entities.React", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Subscribe", b =>
                {
                    b.HasOne("LarQ.Core.Entities.Podcast", "Podcast")
                        .WithMany("Subscribes")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.Subscription", "Subscription")
                        .WithMany("Subscribes")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Podcast");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Subscription", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationUser", "User")
                        .WithOne("Subscription")
                        .HasForeignKey("LarQ.Core.Entities.Subscription", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LarQ.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LarQ.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LarQ.Core.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Favorite")
                        .IsRequired();

                    b.Navigation("Subscription")
                        .IsRequired();
                });

            modelBuilder.Entity("LarQ.Core.Entities.Category", b =>
                {
                    b.Navigation("Podcasts");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Episode", b =>
                {
                    b.Navigation("Guests");

                    b.Navigation("Reacts");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Favorite", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Host", b =>
                {
                    b.Navigation("Podcasts");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Owner", b =>
                {
                    b.Navigation("Hosts");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Playlist", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Podcast", b =>
                {
                    b.Navigation("Episodes");

                    b.Navigation("Subscribes");
                });

            modelBuilder.Entity("LarQ.Core.Entities.Subscription", b =>
                {
                    b.Navigation("Subscribes");
                });
#pragma warning restore 612, 618
        }
    }
}
